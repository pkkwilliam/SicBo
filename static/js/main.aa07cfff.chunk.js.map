{"version":3,"sources":["doubleDown/doubleDownCalculate.js","table/table.js","App.js","serviceWorker.js","index.js"],"names":["SMALL","OPPOSITE","DoubleDown","base","purchaseLimit","startPurchaseAmount","target","makeUpMethod","gamePlay","gameWin","gameLost","threeTheSame","highestDouble","highestWin","highestLose","currentBalance","currentPurchaseAmount","isLastGameLose","lastGameResult","gamesDetail","this","gameDetail","generateGame","push","generateGameDetail","setupPurchase","isAbleToGamble","generateSimullateReport","playerPurchase","casinoPurchase","win","generatePlayerPurchase","generateCasinoPurchase","diceSum","diceSet","Set","i","diceNumber","randomNumber","Math","floor","random","diceMaximumNumber","add","size","SicBoTable","props","console","log","Paper","Table","stickyHeader","TableHead","TableRow","getColumns","map","column","TableCell","key","id","align","style","minWidth","label","TableBody","result","row","index","value","format","name","Component","App","CalculateButton","Button","onClick","onPressCalculateButton","state","labels","calculateButton","iteration","winCount","loseCount","gameResult","calculate","setState","hasResult","Result","AbstractResult","className","TextFieldSection","inputTextFields","startAdornment","defaultValue","item","TextField","InputProps","InputAdornment","position","onChange","event","onChangeTextField","placeholder","chineseLabels","header","language","getLabels","englishLabels","textField","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa07cfff.chunk.js","sourcesContent":["const BIG = \"BIG\";\nconst SMALL = \"SMALL\";\nconst THREE_THE_SAME = \"THREE_THE_SAME\";\n\nconst SAME = \"SAME\";\nconst OPPOSITE = \"OPPOSITE\";\n\nexport class DoubleDown {\n  static diceNumber = 3;\n  static diceMaximumNumber = 6;\n  gamePlay = 0;\n  gameWin = 0;\n  gameLost = 0;\n  threeTheSame = 0;\n  highestDouble = 0;\n  highestWin = 0;\n  highestLose = 0;\n\n  currentBalance = 0;\n  currentPurchaseAmount = 0;\n  isLastGameLose = false;\n  lastGameResult = SMALL;\n  purchaseLimit = 0;\n  startPurchaseAmount = 0;\n  makeUpMethod = OPPOSITE;\n  target = 0;\n\n  gamesDetail = [];\n\n  constructor(\n    base,\n    purchaseLimit,\n    startPurchaseAmount,\n    target,\n    makeUpMethod = OPPOSITE\n  ) {\n    this.currentBalance = base;\n    this.currentPurchaseAmount = startPurchaseAmount;\n    this.isLastGameLose = false;\n    this.lastGameResult = SMALL;\n    this.purchaseLimit = purchaseLimit;\n    this.makeUpMethod = makeUpMethod;\n    this.startPurchaseAmount = startPurchaseAmount;\n    this.target = target;\n  }\n\n  calculate() {\n    do {\n      this.gamePlay++;\n      let gameDetail = this.generateGame();\n      this.gamesDetail.push(this.generateGameDetail(gameDetail));\n      this.setupPurchase();\n    } while (this.isAbleToGamble());\n    return this.generateSimullateReport();\n  }\n\n  generateGameDetail(gameDetail) {\n    let { gameWin, playerPurchase, casinoPurchase } = gameDetail;\n    return {\n      currentBalance: this.currentBalance,\n      currentPurchaseAmount: this.currentPurchaseAmount,\n      gameWin,\n      playerPurchase,\n      casinoPurchase\n    };\n  }\n\n  generateSimullateReport() {\n    let {\n      currentBalance,\n      gamePlay,\n      gameWin,\n      gameLost,\n      threeTheSame,\n      highestDouble,\n      highestWin,\n      highestLose,\n      gamesDetail\n    } = this;\n    return {\n      win: this.currentBalance >= this.target,\n      currentBalance,\n      gamePlay,\n      gameWin,\n      gameLost,\n      threeTheSame,\n      highestDouble,\n      highestWin,\n      highestLose,\n      gamesDetail\n    };\n  }\n\n  generateGame() {\n    let playerPurchase = this.generatePlayerPurchase();\n    let casinoPurchase = this.generateCasinoPurchase();\n    let gameWin;\n    if (playerPurchase === casinoPurchase) {\n      this.gameWin++;\n      this.isLastGameLose = false;\n      this.currentBalance += this.currentPurchaseAmount;\n      this.highestWin =\n        this.currentPurchaseAmount > this.highestWin\n          ? this.currentPurchaseAmount\n          : this.highestWin;\n      gameWin = true;\n    } else {\n      this.gameLost++;\n      this.isLastGameLose = true;\n      this.currentBalance -= this.currentPurchaseAmount;\n      this.highestLose =\n        this.currentPurchaseAmount > this.highestLose\n          ? this.currentPurchaseAmount\n          : this.highestLose;\n      gameWin = false;\n    }\n    return { gameWin, playerPurchase, casinoPurchase };\n  }\n\n  setupPurchase() {\n    if (this.isLastGameLose === true) {\n      this.currentPurchaseAmount *= 2;\n      if (this.currentPurchaseAmount > this.highestDouble) {\n        this.highestDouble = this.currentPurchaseAmount;\n      }\n    } else {\n      this.currentPurchaseAmount = this.startPurchaseAmount;\n    }\n  }\n\n  generatePlayerPurchase() {\n    switch ((this, this.makeUpMethod)) {\n      case SAME:\n        return this.lastGameResult === SMALL ? SMALL : BIG;\n      case OPPOSITE:\n        return this.lastGameResult === SMALL ? BIG : SMALL;\n      default:\n        return SMALL;\n    }\n  }\n\n  generateCasinoPurchase() {\n    let diceSum = 0;\n    let diceSet = new Set();\n    for (let i = 0; i < DoubleDown.diceNumber; i++) {\n      let randomNumber = Math.floor(\n        Math.random() * DoubleDown.diceMaximumNumber + 1\n      );\n      diceSum += randomNumber;\n      diceSet.add(randomNumber);\n    }\n    if (diceSet.size === 1) {\n      this.threeTheSame++;\n      return THREE_THE_SAME;\n    }\n    return diceSum >= 11 ? BIG : SMALL;\n  }\n\n  isAbleToGamble() {\n    if (this.currentBalance >= this.target) {\n      return false;\n    }\n    if (this.currentPurchaseAmount > this.currentBalance) {\n      return false;\n    }\n    if (this.currentPurchaseAmount > this.purchaseLimit) {\n      return false;\n    }\n    return true;\n  }\n\n  generateReport() {\n    return {\n      gamePlay: this.gamePlay,\n      gameWin: this.gameWin,\n      gameLost: this.gameLost,\n      threeTheSame: this.threeTheSame,\n      highestDouble: this.highestDouble,\n      highestWin: this.highestWin,\n      highestLose: this.highestLose,\n      currentBalance: this.currentBalance,\n      win: this.currentBalance >= this.target,\n      gamesDetail: this.gamesDetail\n    };\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Paper,\n  TableHead,\n  TableRow,\n  TableCell,\n  Table,\n  TableBody\n} from \"@material-ui/core\";\n\nexport default class SicBoTable extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n  }\n\n  render() {\n    return (\n      <Paper>\n        <div>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                {this.getColumns().map(column => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.props.result.map((row, index) => {\n                return (\n                  <TableRow>\n                    {this.getColumns().map(column => {\n                      const value =\n                        column.id === \"gameNumber\" ? index + 1 : row[column.id];\n                      return (\n                        <TableCell align={column.align}>\n                          {column.format(value)}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </Paper>\n    );\n  }\n\n  getColumns() {\n    let columns = [\n      { name: \"gameNumber\", label: \"場\", format: value => value },\n      { name: \"win\", label: \"結果\", format: value => (value ? \"贏\" : \"輸\") },\n      { name: \"currentBalance\", label: \"餘額\", format: value => `$${value}` },\n      { name: \"gamePlay\", label: \"次數\", format: value => value },\n      { name: \"gameWin\", label: \"贏/場\", format: value => value },\n      { name: \"gameLost\", label: \"輸/場\", format: value => value },\n      { name: \"threeTheSame\", label: \"圍骰/場\", format: value => value },\n      {\n        name: \"highestDouble\",\n        label: \"最高雙倍\",\n        format: value => `$${value}`\n      },\n      { name: \"highestWin\", label: \"最高贏\", format: value => `$${value}` },\n      { name: \"highestLose\", label: \"最高輸\", format: value => `$${value}` }\n    ];\n    return columns.map(column => {\n      return {\n        id: column.name,\n        label: column.label,\n        minWidth: \"auto\",\n        align: \"center\",\n        format: column.format\n      };\n    });\n  }\n}\n","import React from \"react\";\nimport { Button, TextField, InputAdornment } from \"@material-ui/core\";\nimport chineseLabels from \"./content/label.cn.json\";\nimport englishLabels from \"./content/label.en.json\";\nimport \"./App.css\";\nimport { DoubleDown } from \"./doubleDown/doubleDownCalculate\";\nimport SicBoTable from \"./table/table.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      base: 3000,\n      iteration: 10,\n      purchaseLimit: 20000,\n      startPurchaseAmount: 200,\n      target: 3200,\n      labels: chineseLabels,\n      hasResult: false,\n      result: [],\n      winCount: 0,\n      loseCount: 0\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>{this.state.labels.header}</p>\n        </header>\n        <this.TextFieldSection />\n        <this.CalculateButton />\n        {this.state.hasResult ? <this.Result /> : null}\n      </div>\n    );\n  }\n\n  CalculateButton = () => {\n    return (\n      <Button onClick={this.onPressCalculateButton}>\n        <p>{this.state.labels.calculateButton}</p>\n      </Button>\n    );\n  };\n\n  onPressCalculateButton = () => {\n    const {\n      base,\n      iteration,\n      purchaseLimit,\n      startPurchaseAmount,\n      target\n    } = this.state;\n    let result = [];\n    let winCount = 0;\n    let loseCount = 0;\n    for (let i = 0; i < iteration; i++) {\n      let doubleDownAlgorithm = new DoubleDown(\n        base,\n        purchaseLimit,\n        startPurchaseAmount,\n        target\n      );\n      let gameResult = doubleDownAlgorithm.calculate();\n      if (gameResult.win) {\n        winCount++;\n      } else {\n        loseCount++;\n      }\n      result.push(gameResult);\n    }\n    this.setState({\n      hasResult: true,\n      result,\n      winCount,\n      loseCount\n    });\n  };\n\n  Result = () => {\n    return (\n      <div>\n        <h1>結果</h1>\n        <this.AbstractResult />\n        <SicBoTable result={this.state.result} />\n      </div>\n    );\n  };\n\n  AbstractResult = () => {\n    let { winCount, loseCount } = this.state;\n    return (\n      <div className={\"Result-win-rate-container\"}>\n        <p>{`贏/場: ${winCount} `}</p>\n        <p>{`輸/場: ${loseCount} `}</p>\n        <p>{`勝率: ${(winCount / (winCount + loseCount)) * 100}%`}</p>\n      </div>\n    );\n  };\n\n  setLanguage(language) {\n    let labels = this.getLabels(language);\n    this.setState({\n      labels\n    });\n  }\n\n  getLabels(language) {\n    switch (language) {\n      case \"chinese\":\n        return chineseLabels;\n      case \"english\":\n        return englishLabels;\n      default:\n        return chineseLabels;\n    }\n  }\n\n  TextFieldSection = () => {\n    let labels = this.state.labels.inputTextFields;\n    let {\n      base,\n      purchaseLimit,\n      startPurchaseAmount,\n      target,\n      iteration\n    } = this.state;\n    const textFieldsValues = [\n      {\n        startAdornment: \"$\",\n        name: \"base\",\n        label: labels.base,\n        defaultValue: base\n      },\n      {\n        startAdornment: \"$\",\n        name: \"purchaseLimit\",\n        label: labels.purchaseLimit,\n        defaultValue: purchaseLimit\n      },\n      {\n        startAdornment: \"$\",\n        name: \"startPurchaseAmount\",\n        label: labels.startPurchaseAmount,\n        defaultValue: startPurchaseAmount\n      },\n      {\n        startAdornment: \"$\",\n        name: \"target\",\n        label: labels.target,\n        defaultValue: target\n      },\n      {\n        startAdornment: \"\",\n        name: \"iteration\",\n        label: labels.iteration,\n        defaultValue: iteration\n      }\n    ];\n    return textFieldsValues.map((item, index) => {\n      return (\n        <div className=\"Text-field-container\">\n          <div className={\"Text-field-label-container\"}>{item.label}</div>\n          <TextField\n            key={index}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  {item.startAdornment}\n                </InputAdornment>\n              )\n            }}\n            name={item.name}\n            onChange={event => this.onChangeTextField(event)}\n            placeholder={item.defaultValue}\n          ></TextField>\n        </div>\n      );\n    });\n  };\n\n  onChangeTextField(textField) {\n    let { name, value } = textField.target;\n    this.setState({\n      [name]: value\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}